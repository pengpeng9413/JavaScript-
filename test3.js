/**
 * @name 这节我们会来重新梳理let,const,var;
 */

 /**
  * @see 通常我们讲const赋值之后就不能变化了，那么到底怎么来理解这句话呢？
  * @see 我们先来做以下几个实验：
  * 
  */
 const a=1
 a=2
 console.log(a)   // 抛错，不能被重新赋值

 const foo={}
 // 为foo添加一个属性
 foo.prop=123   // 成功
 foo={}    // 抛错

 以上我们总结出：
                const实际上保证的并不是仅仅表示表面上变量（基本类型）的值不能改动，而是变量指向的内存地址不得改动；
                1. const 声明基本数据类型的时候，比如 number，string，布尔的时候，
                   不能再赋值，只能是个常量，如果改变了，就相当于指向的内存地址发生了改变，这是与设计相悖的
                2. const 声明一个常量是一个对象时，指向该内存地址的对象的数据结构，我们是可以进行更改的。但是更改指向该常量的内存地址
                   比如，重新赋值为一个新的对象，这都将导致指针发生变化，导致抛错
